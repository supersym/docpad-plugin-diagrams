// Generated by CoffeeScript 1.4.0
(function() {
  var $, append3bytes, compress, deflater, done_deflating, encode64, encode6bit;

  encode64 = function(data) {
    var i, r;
    r = "";
    i = 0;
    while (i < data.length) {
      if (i + 2 === data.length) {
        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), 0);
      } else if (i + 1 === data.length) {
        r += append3bytes(data.charCodeAt(i), 0, 0);
      } else {
        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i + 1), data.charCodeAt(i + 2));
      }
      i += 3;
    }
    return r;
  };

  append3bytes = function(b1, b2, b3) {
    var c1, c2, c3, c4, r;
    c1 = b1 >> 2;
    c2 = ((b1 & 0x3) << 4) | (b2 >> 4);
    c3 = ((b2 & 0xF) << 2) | (b3 >> 6);
    c4 = b3 & 0x3F;
    r = "";
    r += encode6bit(c1 & 0x3F);
    r += encode6bit(c2 & 0x3F);
    r += encode6bit(c3 & 0x3F);
    r += encode6bit(c4 & 0x3F);
    return r;
  };

  encode6bit = function(b) {
    if (b < 10) {
      return String.fromCharCode(48 + b);
    }
    b -= 10;
    if (b < 26) {
      return String.fromCharCode(65 + b);
    }
    b -= 26;
    if (b < 26) {
      return String.fromCharCode(97 + b);
    }
    b -= 26;
    if (b === 0) {
      return "-";
    }
    if (b === 1) {
      return "_";
    }
    return "?";
  };

  done_deflating = function(e) {
    return $("im").src = "http://www.plantuml.com/plantuml/img/" + encode64(e.data);
  };

  compress = function(s) {
    s = unescape(encodeURIComponent(s));
    if (deflater) {
      if (deflater.port && deflater.port.postMessage) {
        return deflater.port.postMessage(s);
      } else {
        return deflater.postMessage(s);
      }
    } else {
      return setTimeout((function() {
        return done_deflating({
          data: deflate(s)
        });
      }), 100);
    }
  };

  $ = function(id) {
    return document.getElementById(id);
  };

  deflater = window.SharedWorker && new SharedWorker("rawdeflate.js");

  if (deflater) {
    deflater.port.addEventListener("message", done_deflating, false);
    deflater.port.start();
  } else if (window.Worker) {
    deflater = new Worker("rawdeflate.js");
    deflater.onmessage = done_deflating;
  }

}).call(this);
